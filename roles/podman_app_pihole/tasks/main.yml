- name: check if /appli exist
  stat:
    path: /appli
  register: appli_exist

- name: raise error is /appli doesn't exist
  fail:
    msg: le dossier /appli n'existe pas
  when: not appli_exist.stat.exists

- name: register podboy uid
  command: id -u podboy
  register: podboy_uid

- name: register podboy gid
  command: id -g podboy
  register: podboy_gid

- name: enable systemd-resolved
  systemd:
    name: systemd-resolved
    state: started
    enabled: false
    masked: false
    daemon_reload: true

- name: create resolved.conf.d folder
  file:
    path: "/etc/systemd/resolved.conf.d/"
    state: directory

- name: disable stub-listener
  copy:
    src: "stub-listener.conf"
    dest: "/etc/systemd/resolved.conf.d/stub-listener.conf"

- name: install acl
  package:
    name:
      - acl
      - policycoreutils
    state: latest

- name: apply selinux linux for pihole
  seboolean:
    name: "{{item}}"
    state: true
    persistent: true
  with_items:
    - "virt_sandbox_use_netlink"

- name: copy NetworkManager config
  copy:
    src: NetworkManager.conf
    dest: /etc/NetworkManager/NetworkManager.conf

- name: remove /etc/resolv.conf symlink
  file:
    path: /etc/resolv.conf
    state: absent

- name: check if pihole folders exist
  stat:
    path: "{{pihole_base_folder}}"
  register: pihole_folder

- name: create pihole directory
  file:
    path: "{{pihole_base_folder}}"
    owner: podboy
    group: podboy
    mode: "u=rwx,g=rx"
    state: directory
  when: not pihole_folder.stat.exists

- name: create pihole sub directories if needed
  file:
    path: "{{item.file}}"
    owner: podboy
    group: podboy
    mode: "{{item.perm}}"
    state: directory
  with_items:
    # les perm du dossier pihole sont large car elles seront réécrites par l'appli au démarrage
    - { file: "{{pihole_etc_pihole_folder}}", perm: "u=rwx,g=rx,o-rwx" }
    - { file: "{{pihole_etc_dnsmasq_folder}}", perm: "u=rwx,g=rwx,o=rwx" }
  when: not pihole_folder.stat.exists

- name: copy dnscrypt config
  copy:
    src: "dnscrypt-proxy.toml"
    dest: "{{pihole_dnscrypt_conf_file}}"
    owner: podboy
    group: podboy
    mode: 'u=rw,g=r,o=r'

- name: create local systemd directory
  file:
    path: "{{pihole_services_path}}"
    owner: podboy
    group: podboy
    mode: "u=rwx"
    state: directory

- name: add firewall service rules for lan
  firewalld:
    zone: public
    service: "{{item}}"
    permanent: true
    state: enabled
  with_items:
    - dns
    - http
  notify: reload firewalld

- name: add firewall forward rules for lan
  firewalld:
    zone: public
    permanent: true
    state: enabled
    port_forward:
      - port: "{{item.port}}"
        proto: "{{item.proto}}"
        toport: "{{item.toport}}"
  with_items:
    - { port: 53, proto: udp, toport: "{{os_dns_port}}" }
    - { port: 53, proto: tcp, toport: "{{os_dns_port}}" }
    - { port: 80, proto: tcp, toport: "{{os_http_port}}" }
  notify: reload firewalld

- name: add lo interface to firewall trusted zone
  firewalld:
    zone: trusted
    interface: lo
    state: enabled
    permanent: true
  notify: reload firewalld

- name: add firewall service rules for lo
  firewalld:
    zone: trusted
    service: "{{item}}"
    permanent: true
    state: enabled
  with_items:
    - dns
  notify:
    - reload firewalld
    - restart NetworkManager

- name: add firewall forward rules for lo
  firewalld:
    zone: trusted
    permanent: true
    state: enabled
    port_forward:
      - port: "{{item.port}}"
        proto: "{{item.proto}}"
        toport: "{{item.toport}}"
  with_items:
    - { port: 53, proto: udp, toport: "{{os_dns_port}}" }
    - { port: 53, proto: tcp, toport: "{{os_dns_port}}" }
  notify:
    - reload firewalld
    - restart NetworkManager

- name: flush handlers
  meta: flush_handlers

- name: pull pihole image
  become: true
  become_user: podboy
  containers.podman.podman_image:
    name: "{{item}}"
  with_items:
    - "{{pihole_pihole_image}}"
    - "{{pihole_dnscrypt_image}}"

- name: disable and stop systemd-resolved
  systemd:
    name: systemd-resolved
    state: stopped
    enabled: false
    masked: true
    daemon_reload: true

- name: create pod
  become: true
  become_user: podboy
  containers.podman.podman_pod:
    name: "{{pihole_pod_name}}"
    state: created
    network: slirp4netns:port_handler=slirp4netns
    ports:
      - "{{os_dns_port}}:53/tcp"
      - "{{os_dns_port}}:53/udp"
      - "{{os_http_port}}:80/tcp"
    generate_systemd:
      after: network-online.target
      wants: network-online.target
      new: true
      restart_policy: "{{pihole_services_restart_policy}}"
      path: "{{pihole_services_path}}"

- name: create dnscrypt container
  become: true
  become_user: podboy
  containers.podman.podman_container:
    name: "{{pihole_dnscrypt_name}}"
    image: "{{pihole_dnscrypt_image}}"
    pod: "{{pihole_pod_name}}"
    # restart_policy: always
    volumes:
      - "{{pihole_dnscrypt_conf_file}}:/etc/dnscrypt-proxy/dnscrypt-proxy.toml:ro,Z"
    generate_systemd:
      after: "{{pihole_services_pod_name}}"
      requires: "{{pihole_services_pod_name}}"
      new: true
      restart_policy: "{{pihole_services_restart_policy}}"
      path: "{{pihole_services_path}}"
    state: started

- name: create pihole container
  become: true
  become_user: podboy
  containers.podman.podman_container:
    name: "{{pihole_pihole_name}}"
    image: "{{pihole_pihole_image}}"
    pod: "{{pihole_pod_name}}"
    env:
      TZ: Europe/Paris
      # slirp4netns utilise la carte réseau tap0 pour la communication container/hôte
      INTERFACE: tap0
    volumes:
      - "{{pihole_etc_pihole_folder}}:/etc/pihole:Z"
      - "{{pihole_etc_dnsmasq_folder}}:/etc/dnsmasq.d:Z"
    # restart_policy: always
    cap_add:
      - CAP_CHOWN
      - CAP_NET_BIND_SERVICE
    generate_systemd:
      after: "{{pihole_services_pod_name}}"
      requires: "{{pihole_services_pod_name}}"
      new: true
      restart_policy: "{{pihole_services_restart_policy}}"
      path: "{{pihole_services_path}}"
    state: started

# semble nécessaire pour que le dns fonctionne correctement sur la machine
- name: restart NetworkManager
  systemd:
    name: NetworkManager
    state: restarted

- name: reload user systemd
  become: true
  become_user: podboy
  systemd:
    daemon_reload: true
    scope: "user"
    name: "{{item}}"
    state: started
    enabled: true
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{podboy_uid.stdout}}"
    DBUS_SESSION_BUS_ADDRESS: "/run/user/{{podboy_uid.stdout}}/bus"
  with_items:
    - "pod-{{pihole_pod_name}}"
    - "container-{{pihole_pihole_name}}"
    - "container-{{pihole_dnscrypt_name}}"

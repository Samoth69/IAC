- name: check if /appli exist
  stat:
    path: /appli
  register: appli_exist

- name: raise error is /appli doesn't exist
  fail:
    msg: le dossier /appli n'existe pas
  when: not appli_exist.stat.exists

- name: check if podboy_uid is defined
  fail:
    msg: podboy_uid variable isn't defined
  when: podboy_uid is undefined

- name: check if podboy_gid is defined
  fail:
    msg: podboy_gid variable isn't defined
  when: podboy_gid is undefined

- name: enable systemd-resolved
  systemd:
    name: systemd-resolved
    state: started
    enabled: false
    masked: false
    daemon_reload: true

- name: create resolved.conf.d folder
  file:
    path: "/etc/systemd/resolved.conf.d/"
    state: directory

- name: disable stub-listener
  copy:
    src: "stub-listener.conf"
    dest: "/etc/systemd/resolved.conf.d/stub-listener.conf"

- name: install acl
  package:
    name:
      - acl
      - policycoreutils
    state: latest

- name: apply selinux linux for pihole
  seboolean:
    name: "{{item}}"
    state: true
    persistent: true
  with_items:
    - "virt_sandbox_use_netlink"

- name: copy NetworkManager config
  copy:
    src: NetworkManager.conf
    dest: /etc/NetworkManager/NetworkManager.conf
  notify: restart NetworkManager

- name: remove /etc/resolv.conf symlink
  file:
    path: /etc/resolv.conf
    state: absent

- name: check if pihole folders exist
  stat:
    path: "{{pihole_base_folder}}"
  register: pihole_folder

- name: create pihole directory
  file:
    path: "{{pihole_base_folder}}"
    owner: podboy
    group: podboy
    mode: "u=rwx,g=rx"
    state: directory
  when: not pihole_folder.stat.exists

- name: create pihole sub directories if needed
  file:
    path: "{{item.file}}"
    owner: podboy
    group: podboy
    mode: "{{item.perm}}"
    state: directory
  with_items:
    # les perm du dossier pihole sont large car elles seront réécrites par l'appli au démarrage
    - { file: "{{pihole_etc_pihole_folder}}", perm: "u=rwx,g=rx,o-rwx" }
    - { file: "{{pihole_etc_dnsmasq_folder}}", perm: "u=rwx,g=rwx,o=rwx" }
  when: not pihole_folder.stat.exists

- name: add firewall service rules
  firewalld:
    service: "{{item}}"
    permanent: true
    state: enabled
  with_items:
    - dns
    - http
  notify: reload firewalld

- name: add firewall forward rules
  firewalld:
    permanent: true
    state: enabled
    port_forward:
      - port: "{{item.port}}"
        proto: "{{item.proto}}"
        toport: "{{item.toport}}"
  with_items:
    - { port: 53, proto: udp, toport: "{{os_dns_port}}" }
    - { port: 53, proto: tcp, toport: "{{os_dns_port}}" }
    - { port: 80, proto: tcp, toport: "{{os_http_port}}" }
  notify: reload firewalld

- name: flush handlers
  meta: flush_handlers

- name: pull pihole image
  containers.podman.podman_image:
    name: docker.io/pihole/pihole:latest

- name: disable and stop systemd-resolved
  systemd:
    name: systemd-resolved
    state: stopped
    enabled: false
    masked: true
    daemon_reload: true

- name: create pihole container
  become: true
  become_user: podboy
  containers.podman.podman_container:
    name: pihole
    image: docker.io/pihole/pihole:latest
    ports:
      - "{{os_dns_port}}:53/tcp"
      - "{{os_dns_port}}:53/udp"
      - "{{os_http_port}}:80/tcp"
    env:
      TZ: Europe/Paris
      # pour une raison obscure, l'interface des containers podman s'appelle tap0 et non eth0
      INTERFACE: tap0
    volumes:
      - "{{pihole_etc_pihole_folder}}:/etc/pihole:Z"
      - "{{pihole_etc_dnsmasq_folder}}:/etc/dnsmasq.d:Z"
    restart_policy: always
    cap_add:
      - CAP_CHOWN
      - CAP_NET_BIND_SERVICE
    network: slirp4netns:port_handler=slirp4netns